<!DOCTYPE html>
<html>
<head>
  <title><%= title %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
  <style>
    body {
      background-color: #f8f9fa;
    }
    .task-card {
      background: white;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      transition: transform 0.2s;
    }
    .task-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }
    .add-task-form {
      background: white;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      margin-bottom: 30px;
    }
    .task-completed {
      opacity: 0.6;
    }
    .task-completed .card-text {
      text-decoration: line-through;
      color: #6c757d;
    }
    .task-checkbox {
      transform: scale(1.2);
      margin-right: 10px;
    }
    .task-actions {
      opacity: 0;
      transition: opacity 0.2s;
    }
    .task-card:hover .task-actions {
      opacity: 1;
    }
    .edit-form {
      display: none;
    }
    .btn-sm {
      padding: 0.25rem 0.5rem;
      font-size: 0.875rem;
    }
    .priority-indicator {
      width: 4px;
      height: 100%;
      position: absolute;
      left: 0;
      top: 0;
      border-radius: 8px 0 0 8px;
    }
    .priority-high { background-color: #dc3545; }
    .priority-medium { background-color: #ffc107; }
    .priority-low { background-color: #198754; }
    .priority-badge {
      font-size: 0.75rem;
      padding: 0.25rem 0.5rem;
    }
    .task-card {
      position: relative;
    }
    .due-date-indicator {
      font-size: 0.75rem;
    }
    .due-today {
      color: #fd7e14;
      font-weight: bold;
    }
    .due-overdue {
      color: #dc3545;
      font-weight: bold;
    }
    .due-upcoming {
      color: #6f42c1;
    }
    
    /* Kanban Board Styles */
    .kanban-board {
      display: flex;
      gap: 20px;
      overflow-x: auto;
      padding: 20px 0;
    }
    .kanban-column {
      flex: 1;
      min-width: 300px;
      background: #f8f9fa;
      border-radius: 8px;
      padding: 15px;
    }
    .kanban-header {
      text-align: center;
      padding: 10px;
      margin-bottom: 15px;
      border-radius: 6px;
      font-weight: bold;
    }
    .kanban-todo { background-color: #e3f2fd; }
    .kanban-progress { background-color: #fff3e0; }
    .kanban-done { background-color: #e8f5e8; }
    
    .kanban-task {
      background: white;
      border-radius: 6px;
      padding: 12px;
      margin-bottom: 10px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      cursor: move;
      transition: all 0.2s;
    }
    .kanban-task:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }
    .kanban-task.dragging {
      opacity: 0.5;
      transform: rotate(5deg);
    }
    .kanban-tasks.drag-over {
      background-color: #e3f2fd;
      border: 2px dashed #2196f3;
      border-radius: 8px;
    }
    .nav-link.active {
      background-color: rgba(255,255,255,0.2);
      border-radius: 4px;
    }
  </style>
</head>
<body>
<%- include('./header'); %>
<%- include('./error_messages'); %>
<% if(isAuth) { %>
<div class="container mt-4">
  <!-- Add Task Form -->
  <div class="add-task-form">
    <h4 class="mb-3">
      <i class="bi bi-plus-circle"></i> Add New Task
    </h4>
    <form action="/" method="post">
      <div class="row g-2">
        <div class="col-md-6">
          <input 
            required 
            type="text" 
            name="add" 
            class="form-control form-control-lg" 
            placeholder="What needs to be done?"
          />
        </div>
        <div class="col-md-2">
          <select name="priority" class="form-select form-select-lg">
            <option value="low">ðŸŸ¢ Low</option>
            <option value="medium" selected>ðŸŸ¡ Medium</option>
            <option value="high">ðŸ”´ High</option>
          </select>
        </div>
        <div class="col-md-2">
          <input 
            type="date" 
            name="due_date" 
            class="form-control form-control-lg"
            min="<%= new Date().toISOString().split('T')[0] %>"
          />
        </div>
        <div class="col-md-2">
          <button type="submit" class="btn btn-primary btn-lg w-100">
            <i class="bi bi-plus"></i> Add
          </button>
        </div>
      </div>
    </form>
  </div>

  <!-- Tasks Display -->
  <% if (view === 'kanban') { %>
    <!-- Kanban Board View -->
    <div class="kanban-board">
      <!-- To Do Column -->
      <div class="kanban-column" data-status="todo">
        <div class="kanban-header kanban-todo">
          <i class="bi bi-list-task"></i> To Do
          <span class="badge bg-primary ms-2">
            <%= todos.filter(t => t.status === 'todo').length %>
          </span>
        </div>
        <div class="kanban-tasks" id="todo-tasks">
          <% todos.filter(t => t.status === 'todo').forEach(function(todo) { %>
            <%- include('partials/kanban-task', {todo: todo}) %>
          <% }) %>
        </div>
      </div>

      <!-- In Progress Column -->
      <div class="kanban-column" data-status="in_progress">
        <div class="kanban-header kanban-progress">
          <i class="bi bi-arrow-clockwise"></i> In Progress
          <span class="badge bg-warning ms-2">
            <%= todos.filter(t => t.status === 'in_progress').length %>
          </span>
        </div>
        <div class="kanban-tasks" id="in_progress-tasks">
          <% todos.filter(t => t.status === 'in_progress').forEach(function(todo) { %>
            <%- include('partials/kanban-task', {todo: todo}) %>
          <% }) %>
        </div>
      </div>

      <!-- Done Column -->
      <div class="kanban-column" data-status="done">
        <div class="kanban-header kanban-done">
          <i class="bi bi-check-circle"></i> Done
          <span class="badge bg-success ms-2">
            <%= todos.filter(t => t.status === 'done').length %>
          </span>
        </div>
        <div class="kanban-tasks" id="done-tasks">
          <% todos.filter(t => t.status === 'done').forEach(function(todo) { %>
            <%- include('partials/kanban-task', {todo: todo}) %>
          <% }) %>
        </div>
      </div>
    </div>
  <% } else { %>
    <!-- List View -->
    <div class="row">
      <div class="col-12">
        <h4 class="mb-3">
          <i class="bi bi-list-task"></i> Your Tasks
          <span class="badge bg-primary ms-2">
            <%= todos.filter(t => !t.completed).length %> active
          </span>
          <% if (todos.filter(t => t.completed).length > 0) { %>
            <span class="badge bg-success ms-1">
              <%= todos.filter(t => t.completed).length %> completed
            </span>
          <% } %>
        </h4>
        
        <% if(todos.length === 0) { %>
          <div class="text-center py-5">
            <i class="bi bi-clipboard-check" style="font-size: 4rem; color: #dee2e6;"></i>
            <p class="text-muted mt-3">No tasks yet! Add your first task above.</p>
          </div>
        <% } else { %>
          <div class="row">
            <% for(let todo of todos){ %>
              <%- include('partials/list-task', {todo: todo}) %>
            <% } %>
          </div>
        <% } %>
      </div>
    </div>
  <% } %>
</div>
<% } else { %>
  <div class="container text-center mt-5">
    <h1 class="display-4 mb-4">Welcome to TaskFlow</h1>
    <p class="lead mb-4">Your personal productivity companion</p>
    <a class="btn btn-primary btn-lg" href="/signup" role="button">
      <i class="bi bi-person-plus"></i> Get Started
    </a>
  </div>
<% } %>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
function editTask(taskId) {
  // Hide display mode
  document.querySelector('.task-display-' + taskId).style.display = 'none';
  // Show edit mode
  document.querySelector('.task-edit-' + taskId).style.display = 'block';
  // Focus on the input
  document.querySelector('.task-edit-' + taskId + ' input').focus();
}

function cancelEdit(taskId) {
  // Show display mode
  document.querySelector('.task-display-' + taskId).style.display = 'block';
  // Hide edit mode
  document.querySelector('.task-edit-' + taskId).style.display = 'none';
}

function formatDueDate(dueDate) {
  if (!dueDate) return '';
  
  const today = new Date();
  const due = new Date(dueDate);
  const diffTime = due.getTime() - today.getTime();
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  
  if (diffDays < 0) {
    return { text: `Overdue by ${Math.abs(diffDays)} day(s)`, class: 'due-overdue' };
  } else if (diffDays === 0) {
    return { text: 'Due today', class: 'due-today' };
  } else if (diffDays === 1) {
    return { text: 'Due tomorrow', class: 'due-upcoming' };
  } else if (diffDays <= 7) {
    return { text: `Due in ${diffDays} days`, class: 'due-upcoming' };
  } else {
    return { text: `Due ${due.toLocaleDateString()}`, class: '' };
  }
}

// Kanban Board Functionality
function initKanbanBoard() {
  const kanbanTasks = document.querySelectorAll('.kanban-task');
  const kanbanColumns = document.querySelectorAll('.kanban-tasks');
  
  // Add drag events to tasks
  kanbanTasks.forEach(task => {
    task.addEventListener('dragstart', handleDragStart);
    task.addEventListener('dragend', handleDragEnd);
  });
  
  // Add drop events to columns
  kanbanColumns.forEach(column => {
    column.addEventListener('dragover', handleDragOver);
    column.addEventListener('drop', handleDrop);
    column.addEventListener('dragenter', handleDragEnter);
    column.addEventListener('dragleave', handleDragLeave);
  });
}

let draggedTask = null;

function handleDragStart(e) {
  draggedTask = this;
  this.classList.add('dragging');
  e.dataTransfer.effectAllowed = 'move';
  e.dataTransfer.setData('text/html', this.outerHTML);
}

function handleDragEnd(e) {
  this.classList.remove('dragging');
  draggedTask = null;
}

function handleDragOver(e) {
  if (e.preventDefault) {
    e.preventDefault();
  }
  e.dataTransfer.dropEffect = 'move';
  return false;
}

function handleDragEnter(e) {
  this.classList.add('drag-over');
}

function handleDragLeave(e) {
  this.classList.remove('drag-over');
}

function handleDrop(e) {
  if (e.stopPropagation) {
    e.stopPropagation();
  }
  
  this.classList.remove('drag-over');
  
  if (draggedTask !== this) {
    const taskId = draggedTask.dataset.taskId;
    const newStatus = this.parentElement.dataset.status;
    
    // Move the task visually
    this.appendChild(draggedTask);
    
    // Update the task status on the server
    updateTaskStatus(taskId, newStatus);
  }
  
  return false;
}

function updateTaskStatus(taskId, newStatus) {
  fetch(`/status/${taskId}`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ status: newStatus }),
  })
  .then(response => {
    if (!response.ok) {
      throw new Error('Failed to update task status');
    }
    return response.json();
  })
  .then(data => {
    console.log('Task status updated successfully');
    // Update column counters
    updateColumnCounters();
  })
  .catch(error => {
    console.error('Error updating task status:', error);
    // Reload page on error to ensure consistency
    window.location.reload();
  });
}

function updateColumnCounters() {
  const todoCount = document.querySelectorAll('#todo-tasks .kanban-task').length;
  const progressCount = document.querySelectorAll('#in_progress-tasks .kanban-task').length;
  const doneCount = document.querySelectorAll('#done-tasks .kanban-task').length;
  
  document.querySelector('.kanban-todo .badge').textContent = todoCount;
  document.querySelector('.kanban-progress .badge').textContent = progressCount;
  document.querySelector('.kanban-done .badge').textContent = doneCount;
}

function deleteTask(taskId) {
  if (confirm('Are you sure you want to delete this task?')) {
    const form = document.createElement('form');
    form.method = 'POST';
    form.action = `/delete/${taskId}`;
    document.body.appendChild(form);
    form.submit();
  }
}

// Initialize Kanban board when page loads
document.addEventListener('DOMContentLoaded', function() {
  if (window.location.search.includes('view=kanban')) {
    initKanbanBoard();
  }
  
  // Highlight active view in navbar
  const currentView = new URLSearchParams(window.location.search).get('view') || 'list';
  document.getElementById(currentView + '-view-btn').classList.add('active');
});
</script>
</body>
</html>
